{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\samuel\\\\pleaseworkforked\\\\src\\\\Ruglist.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport firebase from \"./firebase\";\nimport rugstore from \"./rugstore\";\nimport MintMM from \"./mint\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nrequire('firebase/database');\n\nexport default function RugList(props) {\n  _s();\n\n  const wallet = props.metaMaskAccount;\n  const [urlState, setURLs] = useState();\n  const [supplyExists, setSupply] = useState(0);\n  const [existsList, setExists] = useState();\n  const [loading, setLoading] = useState(false);\n  const [lastTwenty, setLast] = useState();\n  const [over20, check20] = useState(false);\n  const [showMyRugs, setMyRugs] = useState(false);\n  const [showMy, setMy] = useState(false);\n  useEffect(() => {\n    b().then(supply => rugPromise(supply));\n    a().then(rugsOwned => getMyRugs(rugsOwned));\n  }, []);\n\n  function showMine() {\n    if (!showMy) {\n      setMy(true);\n    }\n  }\n\n  async function b() {\n    const supply = await rugstore.methods.totalSupply().call({\n      from: 0x0\n    });\n    setSupply(supply);\n\n    if (supply >= 20) {\n      check20(true);\n    }\n\n    console.log(check20);\n    console.log(supply);\n    return supply;\n  }\n\n  ;\n\n  async function a() {\n    const rugsOwned = await rugstore.methods.tokensOfOwner(wallet).call({\n      from: 0x0\n    }); //console.log(rugsOwned);\n\n    return rugsOwned;\n  }\n\n  ;\n\n  async function rugPromise(supply) {\n    const promise = new Promise(async function (resolve, reject) {\n      const answer = await firebase.database().ref(\"rugs\");\n\n      if (answer != null) {\n        answer.on('value', snapshot => {\n          const rugs = snapshot.val();\n          const rugList = [];\n\n          for (let tokenId in rugs) {\n            rugList.push(rugs[tokenId]);\n          }\n\n          const image = [];\n\n          for (let tokenId in rugs) {\n            image.push(\"https://gateway.pinata.cloud/ipfs/\" + rugs[tokenId].image);\n          }\n\n          ; //console.log(image);\n\n          const _supply = supply;\n          console.log(_supply);\n          const urls = image.slice(0, _supply);\n          console.log(urls);\n          const last20 = urls.slice(Math.max(urls.length - 20, 0)); //console.log(last20);\n\n          setLast(last20);\n          setURLs(urls);\n          return image;\n        });\n        resolve(console.log(\"cool\"));\n      } else {\n        reject(\"err\");\n      }\n    });\n    return promise;\n  }\n\n  async function getMyRugs(rugsOwned) {\n    const promise = new Promise(async function (resolve, reject) {\n      const answer = await firebase.database().ref(\"rugs\");\n\n      if (answer != null) {\n        answer.on('value', snapshot => {\n          const rugs = snapshot.val();\n          const rugList = [];\n          const owned = rugsOwned.map(Number); //console.log(owned);\n\n          for (let tokenId in rugs) {\n            rugList.push(rugs[tokenId]);\n          } //console.log(rugList);\n\n\n          const image = [];\n\n          for (let tokenId in rugs) {\n            image.push(\"https://gateway.pinata.cloud/ipfs/\" + rugs[tokenId].image);\n          }\n\n          ; //console.log(image);\n\n          const myRugs = image.filter(function (el, index) {\n            return owned.indexOf(index) > -1;\n          }); //console.log(myRugs);\n\n          setMyRugs(myRugs);\n          return myRugs;\n        });\n        resolve(console.log(\"ok\"));\n      } else {\n        reject(\"err\");\n      }\n    });\n    return promise;\n  }\n\n  if (showMy) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"images\",\n      children: [/*#__PURE__*/_jsxDEV(MintMM, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Your rugs: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 5\n      }, this), showMyRugs && showMyRugs.map(img => /*#__PURE__*/_jsxDEV(\"img\", {\n        src: img,\n        width: \"100\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 7\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 5\n    }, this);\n  } else if (over20) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"images\",\n      children: [/*#__PURE__*/_jsxDEV(MintMM, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: showMine,\n        children: \"Show my rugs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Last 20 rugs minted: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 5\n      }, this), lastTwenty && lastTwenty.map(img => /*#__PURE__*/_jsxDEV(\"img\", {\n        src: img,\n        width: \"100\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 7\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 5\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"images\",\n      children: [/*#__PURE__*/_jsxDEV(MintMM, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: showMine,\n        children: \"Show my rugs\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 149,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 150,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\"Last \", supplyExists, \" rugs minted: \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 7\n      }, this), urlState && urlState.map(img => /*#__PURE__*/_jsxDEV(\"img\", {\n        src: img,\n        width: \"100\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this);\n  }\n}\n\n_s(RugList, \"2OV4bL6tURMKlGYaUrou7iyJU7A=\");\n\n_c = RugList;\n\nvar _c;\n\n$RefreshReg$(_c, \"RugList\");","map":{"version":3,"sources":["C:/Users/samuel/pleaseworkforked/src/Ruglist.js"],"names":["React","useState","useEffect","firebase","rugstore","MintMM","require","RugList","props","wallet","metaMaskAccount","urlState","setURLs","supplyExists","setSupply","existsList","setExists","loading","setLoading","lastTwenty","setLast","over20","check20","showMyRugs","setMyRugs","showMy","setMy","b","then","supply","rugPromise","a","rugsOwned","getMyRugs","showMine","methods","totalSupply","call","from","console","log","tokensOfOwner","promise","Promise","resolve","reject","answer","database","ref","on","snapshot","rugs","val","rugList","tokenId","push","image","_supply","urls","slice","last20","Math","max","length","owned","map","Number","myRugs","filter","el","index","indexOf","img"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport firebase from \"./firebase\";\r\nimport rugstore from \"./rugstore\";\r\nimport MintMM from \"./mint\";\r\nrequire('firebase/database');\r\n\r\nexport default function RugList(props) {\r\n  const wallet = props.metaMaskAccount;\r\n  const [urlState, setURLs] = useState();\r\n  const [supplyExists, setSupply] = useState(0);\r\n  const [existsList, setExists] = useState();\r\n  const [loading, setLoading] = useState(false);\r\n  const [lastTwenty, setLast] = useState();\r\n  const [over20, check20] = useState(false);\r\n  const [showMyRugs, setMyRugs] = useState(false);\r\n  const [showMy, setMy] = useState(false);\r\n  useEffect(() =>{\r\n        b().then((supply) => rugPromise(supply));\r\n        a().then((rugsOwned) => getMyRugs(rugsOwned));\r\n  }, []);\r\n  function showMine() {\r\n    if(!showMy) {\r\n      setMy(true);\r\n    }\r\n  }\r\n  async function b() {\r\n      const supply = await rugstore.methods.totalSupply().call({\r\n        from: 0x0\r\n      });\r\n      setSupply(supply);\r\n      if (supply >= 20) {\r\n        check20(true);\r\n      }\r\n      console.log(check20);\r\n      console.log(supply);\r\n      return supply;\r\n  };\r\n\r\n  async function a() {\r\n    const rugsOwned = await rugstore.methods.tokensOfOwner(wallet).call({\r\n      from: 0x0\r\n    })\r\n    //console.log(rugsOwned);\r\n    return rugsOwned;\r\n  };\r\n\r\n  async function rugPromise(supply) {\r\n    const promise = new Promise(async function (resolve, reject){\r\n      const answer = await firebase.database().ref(\"rugs\");\r\n      if(answer != null){\r\n        answer.on('value', (snapshot) => {\r\n          const rugs = snapshot.val();\r\n          const rugList = [];\r\n          for (let tokenId in rugs) {\r\n            rugList.push(rugs[tokenId]);\r\n          }\r\n          const image = [];\r\n          for (let tokenId in rugs) {\r\n            image.push(\r\n              \"https://gateway.pinata.cloud/ipfs/\" + rugs[tokenId].image);\r\n          };\r\n          //console.log(image);\r\n          const _supply = supply;\r\n          console.log(_supply);\r\n          const urls = image.slice(0 , _supply);\r\n          console.log(urls);\r\n          const last20 = urls.slice(Math.max(urls.length - 20, 0));\r\n          //console.log(last20);\r\n          setLast(last20);\r\n          setURLs(urls);\r\n          return image;\r\n      });\r\n        resolve(console.log(\"cool\"))\r\n      } else {\r\n        reject(\"err\")\r\n      }\r\n    })\r\n    return promise;\r\n  }\r\n\r\n  async function getMyRugs(rugsOwned) {\r\n    const promise = new Promise(async function (resolve, reject){\r\n      const answer = await firebase.database().ref(\"rugs\");\r\n      if(answer != null){\r\n        answer.on('value', (snapshot) => {\r\n          const rugs = snapshot.val();\r\n          const rugList = [];\r\n          const owned = rugsOwned.map(Number);\r\n          //console.log(owned);\r\n          for (let tokenId in rugs) {\r\n            rugList.push(rugs[tokenId]);\r\n          }\r\n          //console.log(rugList);\r\n          const image = [];\r\n          for (let tokenId in rugs) {\r\n            image.push(\r\n              \"https://gateway.pinata.cloud/ipfs/\" + rugs[tokenId].image);\r\n          };\r\n          //console.log(image);\r\n          const myRugs = image.filter(function(el, index) {\r\n            return owned.indexOf(index) > -1;\r\n          });\r\n          //console.log(myRugs);\r\n          setMyRugs(myRugs);\r\n          return myRugs;\r\n      });\r\n        resolve(console.log(\"ok\"))\r\n      } else {\r\n        reject(\"err\")\r\n      }\r\n    })\r\n    return promise;\r\n  }\r\n\r\n\r\nif(showMy) {\r\n  return (\r\n    <div className=\"images\">\r\n    <MintMM />\r\n    <br></br>\r\n    <h1>Your rugs: </h1>\r\n    <br></br>\r\n\r\n    { showMyRugs && showMyRugs.map(img => (\r\n      <img src={img} width=\"100\"/>\r\n    )) }\r\n    </div>\r\n  );\r\n} else if(over20) {\r\n  return (\r\n    <div className=\"images\">\r\n    <MintMM />\r\n    <br></br>\r\n    <button onClick={showMine}>Show my rugs</button>\r\n    <br></br>\r\n    <h1>Last 20 rugs minted: </h1>\r\n    <br></br>\r\n\r\n    { lastTwenty && lastTwenty.map(img => (\r\n      <img src={img} width=\"100\"/>\r\n    )) }\r\n    </div>\r\n  );\r\n} else {\r\n    return (\r\n      <div className=\"images\">\r\n      <MintMM />\r\n      <br></br>\r\n      <button onClick={showMine}>Show my rugs</button>\r\n      <br></br>\r\n      <h1>Last {supplyExists} rugs minted: </h1>\r\n      <br></br>\r\n\r\n      { urlState && urlState.map(img => (\r\n        <img src={img} width=\"100\"/>\r\n      )) }\r\n      </div>\r\n    );\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n}\r\n"]},"metadata":{},"sourceType":"module"}